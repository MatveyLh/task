{"version":3,"sources":["logo.svg","components/FirstComponent/FirstComponent.js","components/SecondComponent/SecondComponent.js","components/ThirdComponent/ThirdComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","Autoplay","options","autoplay","loop","navigation","height","breakpoints","320","slidesPerView","768","990","FisrtComponent","className","spaceBetween","onSwiper","swiper","console","log","SecondComponent","$","document","ready","banner","imgs","moving","object","speed","on","event","X","Math","floor","pageX","Y","pageY","css","fadeIn","moveAll","useStyles","makeStyles","theme","root","margin","spacing","width","ThirdComponent","classes","useState","success","setSuccess","email","setEmail","message","setMessage","error","setError","Fragment","onSubmit","preventDefault","test","String","toLowerCase","length","id","noValidate","autoComplete","TextField","label","required","onChange","target","value","multiline","rows","variant","Button","type","color","Modal","show","onHide","Body","Footer","onClick","Header","App","licenseKey","scrollingSpeed","render","state","fullpageApi","Wrapper","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,8SCW3CC,IAAWC,IAAI,CAACC,IAAYC,IAAYC,IAAWC,IAAMC,MAEzD,IAAMC,EACO,CACLC,UAAU,EACVC,MAAM,EACNC,YAAY,EACZC,OAAQ,IACRC,YAAa,CACTC,IAAK,CACDC,cAAe,GAEnBC,IAAK,CACDD,cAAe,GAEnBE,IAAK,CACDF,cAAe,KAwBhBG,EAlBQ,WACnB,OACI,yBAAKC,UAAW,mBACZ,kBAAC,IAAD,iBAAYX,EAAZ,CACIY,aAAc,GACdL,cAAe,EACfM,SAAU,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAElC,kBAAC,IAAD,gBACA,kBAAC,IAAD,gBACA,kBAAC,IAAD,gBACA,kBAAC,IAAD,mB,iBCHDG,G,MArCS,WAyBpB,OAxBAC,IAAEC,UAAUC,OAAM,WACd,IAAIC,EAASH,IAAE,WACXI,EAAOJ,IAAE,QAIb,SAASK,EAAQC,EAAQC,GACrBJ,EAAOK,GAAG,aAAa,SAASC,GAC5B,IAAIC,EAAIC,KAAKC,MAAOH,EAAMI,MAAON,EAAM,IAAM,KACzCO,EAAIH,KAAKC,MAAOH,EAAMM,MAAOR,GAAS,KAC1CD,EAAOU,IAAI,YAAa,aAAaN,EAAE,MAAMI,EAAE,QAUxCV,EAhBJa,OAAO,KASlB,SAAkBX,GACdD,EAAOL,IAAEM,EAAO,IAAI,IACpBD,EAAOL,IAAEM,EAAO,IAAI,IACpBD,EAAOL,IAAEM,EAAO,IAAI,GACpBD,EAAOL,IAAEM,EAAO,IAAI,IACpBD,EAAOL,IAAEM,EAAO,IAAI,IAGxBY,CAAQd,MAIR,yBAAKX,UAAU,iBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,kB,4CCxBzB0B,G,YAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACF,QAAS,CACLC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,cAwEJC,EAnEQ,WACnB,IAAMC,EAAUR,IADS,EAEKS,oBAAS,GAFd,mBAElBC,EAFkB,KAETC,EAFS,OAGCF,mBAAS,IAHV,mBAGlBG,EAHkB,KAGXC,EAHW,OAIKJ,mBAAS,IAJd,mBAIlBK,EAJkB,KAITC,EAJS,OAKCN,oBAAS,GALV,mBAKlBO,EALkB,KAKXC,EALW,KAyBzB,OACI,kBAAC,IAAMC,SAAP,KACI,0BAAM5C,UAAWkC,EAAQL,KAAMgB,SApBlB,SAAC7B,GAClBA,EAAM8B,iBACK,0JACHC,KAAKC,OAAOV,GAAOW,gBAAmBT,EAAQU,OAElDb,GAAW,GAF+CM,GAAS,IAiBZQ,GAAI,OAAQC,YAAU,EAACC,aAAa,OACvF,kBAACC,EAAA,EAAD,CAAWH,GAAG,iBAAiBI,MAAM,QAAQC,UAAU,EAAMC,SAX/C,SAACzC,GACvBuB,EAASvB,EAAM0C,OAAOC,UAWd,kBAACL,EAAA,EAAD,CACIH,GAAG,0BACHI,MAAM,kFACNK,WAAS,EACTC,KAAM,EACNL,UAAU,EACVC,SAdY,SAACzC,GACzByB,EAAWzB,EAAM0C,OAAOC,QAcZG,QAAQ,WAEZ,kBAACC,EAAA,EAAD,CAAQD,QAAQ,UAAUE,KAAM,SAAUC,MAAM,WAAhD,2DAIJ,kBAACC,EAAA,EAAD,CAAOC,KAAM/B,EAASgC,OAAQ,WAC1B/B,GAAW,KACX,kBAAC6B,EAAA,EAAMG,KAAP,sJACA,kBAACH,EAAA,EAAMI,OAAP,KACI,kBAACP,EAAA,EAAD,CAAQD,QAAQ,UAAUS,QAAS,WAC/BlC,GAAW,KADf,kBAMR,kBAAC6B,EAAA,EAAD,CAAOC,KAAMzB,EAAO0B,OAAQ,WACxBzB,GAAS,KACT,kBAACuB,EAAA,EAAMM,OAAP,6CACA,kBAACN,EAAA,EAAMG,KAAP,oIACA,kBAACH,EAAA,EAAMI,OAAP,KACI,kBAACP,EAAA,EAAD,CAAQD,QAAQ,UAAUS,QAAS,WAC/B5B,GAAS,KADb,oBC1CL8B,EAvBH,kBACR,kBAAC,IAAD,CAEIC,WAAc,WACdC,eAAkB,IAClBC,OAAQ,YAA4B,EAAzBC,MAAyB,EAAlBC,YAChB,OACI,kBAAC,IAAcC,QAAf,KACI,yBAAK/E,UAAU,WACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,YCZFgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEF9E,SAAS+E,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAchF,MACrBiF,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLtC,QAAQsC,MAAMA,EAAMF,c","file":"static/js/main.bf21ee77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.scss';\r\nimport  './FirstComponent.css';\r\n\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport 'swiper/swiper.scss';\r\nimport SwiperCore, {Navigation, Pagination, Scrollbar, A11y, Autoplay} from 'swiper';\r\n\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y, Autoplay]);\r\n\r\nconst options = {\r\n    options: {\r\n        autoplay: true,\r\n        loop: true,\r\n        navigation: true,\r\n        height: 200,\r\n        breakpoints: {\r\n            320: {\r\n                slidesPerView: 1,\r\n            },\r\n            768: {\r\n                slidesPerView: 2,\r\n            },\r\n            990: {\r\n                slidesPerView: 3,\r\n            },\r\n        },\r\n    }\r\n};\r\n\r\nconst FisrtComponent = () => {\r\n    return (\r\n        <div className={'carouselWrapper'}>\r\n            <Swiper {...options.options}\r\n                spaceBetween={50}\r\n                slidesPerView={3}\r\n                onSwiper={(swiper) => console.log(swiper)}\r\n            >\r\n                <SwiperSlide>Slide 1</SwiperSlide>\r\n                <SwiperSlide>Slide 2</SwiperSlide>\r\n                <SwiperSlide>Slide 3</SwiperSlide>\r\n                <SwiperSlide>Slide 4</SwiperSlide>\r\n            </Swiper>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default FisrtComponent;","import React from 'react';\r\nimport $ from 'jquery';\r\nimport './SecondComponent.css';\r\n\r\nconst SecondComponent = () => {\r\n    $(document).ready(function() {\r\n        var banner = $(\".banner\");\r\n        var imgs = $(\".img\");\r\n        function showAllObjects (object) {\r\n            object.fadeIn(900);\r\n        }\r\n        function moving (object, speed) {\r\n            banner.on('mousemove', function(event) {\r\n                var X = Math.floor((event.pageX)/speed-20) + \"px\";\r\n                var Y = Math.floor((event.pageY)/speed) + \"px\";\r\n                object.css('transform', 'translate('+X+' , '+Y+')');\r\n            });\r\n        }\r\n        function moveAll (object) {\r\n            moving($(object[0]),12);\r\n            moving($(object[1]),22);\r\n            moving($(object[2]),8);\r\n            moving($(object[3]),10);\r\n            moving($(object[4]),20);\r\n        }\r\n        showAllObjects(imgs);\r\n        moveAll(imgs);\r\n    });\r\n\r\n    return (\r\n        <div className=\"bannerWrapper\">\r\n            <div className=\"banner\">\r\n                <div className=\"img item1\"></div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default SecondComponent;","import React, {useState} from 'react';\r\nimport {Modal} from \"react-bootstrap\";\r\nimport { Button } from 'react-bootstrap';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './ThirdComponent.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst ThirdComponent = () => {\r\n    const classes = useStyles();\r\n    const [success, setSuccess] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (!re.test(String(email).toLowerCase()) || !message.length) setError(true);\r\n        else {\r\n            setSuccess(true);\r\n\r\n        }\r\n    };\r\n\r\n    const handleChangeEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    };\r\n\r\n    const handleChangeMessage = (event) => {\r\n        setMessage(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <form className={classes.root} onSubmit={handleSubmit} id={'form'} noValidate autoComplete=\"off\">\r\n                <TextField id=\"standard-basic\" label=\"Email\" required={true} onChange={handleChangeEmail} />\r\n                <TextField\r\n                    id=\"filled-multiline-static\"\r\n                    label=\"Ваше сообщение\"\r\n                    multiline\r\n                    rows={4}\r\n                    required={true}\r\n                    onChange={handleChangeMessage}\r\n                    variant=\"filled\"\r\n                />\r\n                <Button variant=\"success\" type={'submit'} color=\"primary\">\r\n                    Отправить\r\n                </Button>\r\n            </form>\r\n            <Modal show={success} onHide={()=>{\r\n                setSuccess(false)}}>\r\n                <Modal.Body>Письмо отправлено успешно!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={()=>{\r\n                        setSuccess(false)}}>\r\n                        Ок\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={error} onHide={()=>{\r\n                setError(false)}}>\r\n                <Modal.Header>Ошибка</Modal.Header>\r\n                <Modal.Body>Неверно заполнены поля!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={()=>{\r\n                        setError(false)}}>\r\n                        Ок\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default ThirdComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport ReactDOM from 'react-dom';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport './App.css';\nimport FisrtComponent from \"./components/FirstComponent/FirstComponent\";\nimport SecondComponent from \"./components/SecondComponent/SecondComponent\";\nimport ThirdComponent from \"./components/ThirdComponent/ThirdComponent\";\n\nconst App = () => (\n    <ReactFullpage\n        //fullpage options\n        licenseKey = {'YOUR_KEY'}\n        scrollingSpeed = {1000} /* Options here */\n        render={({ state, fullpageApi }) => {\n          return (\n              <ReactFullpage.Wrapper>\n                  <div className='section'>\n                      <FisrtComponent/>\n                  </div>\n                  <div className='section'>\n                      <SecondComponent/>\n                  </div>\n                  <div className='section'>\n                      <ThirdComponent/>\n                  </div>\n              </ReactFullpage.Wrapper>\n          );\n        }}\n    />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}